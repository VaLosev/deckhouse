type: object
properties:
  upstreamNameservers:
    type: array
    description: |
      A list of IP addresses of recursive DNS servers that CoreDNS will use to resolve external domains.

      By default, the `/etc/resolv.conf` list is used.
    items:
      type: string
      pattern: '^[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}(:[0-9]{1,})?$'
  transportProtocolMode:
    type: string
    description: |
      The mode of the transport protocol for communicating with the upstream DNS server:
      - `PreferUDP` — UDP is used, even if the original request came over TCP. Note that if the DNS response from the upstream DNS server exceeds 512 bytes and has been truncated and marked with the TC bit ([RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035.html#section-4.2.1)), then it will be resent over TCP ([RFC 5966](https://datatracker.ietf.org/doc/html/rfc5966)). The request will not be resent over TCP if there are other UDP issues.
      - `ForceTCP` — Always uses TCP, even if the original request is over UDP.
      - `KeepOriginal` — Uses the same protocol (TCP or UDP) as the original request.
    enum: [PreferUDP, ForceTCP, KeepOriginal]
    default: PreferUDP
  hosts:
    description: |
      A static list of hosts similar to that of `/etc/hosts`.
    x-doc-required: false
    type: array
    items:
      type: object
      properties:
        domain:
          type: string
          pattern: '^[0-9a-zA-Z\.-]+$'
        ip:
          type: string
          pattern: '^[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}$'
  stubZones:
    x-examples:
    -
      - zone: example.com
        upstreamNameservers: ['8.8.8.8']
        cacheTTLSeconds: 3600
        transportProtocolMode: PreferUDP
    description: |
      A list of additional zones CoreDNS should be authoritative for.
    type: array
    default: []
    items:
      type: object
      required: ['zone', 'upstreamNameservers']
      properties:
        zone:
          description: |
            The CoreDNS zone.
          type: string
          pattern: '^[0-9a-zA-Z\.-]+$'
          x-doc-example: consul.local
        upstreamNameservers:
          mixLength: 1
          description: |
            A list of IP addresses of recursive DNS servers that CoreDNS will use to resolve domains in this zone.
          type: array
          items:
            type: string
            pattern: '^[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}\.[0-9]{1,}(:[0-9]{1,})?$'
        cacheTTLSeconds:
          type: integer
          default: 30
          minimum: 1
          maximum: 3600
          description: |
            Max TTL in seconds for NOERROR responses.
        transportProtocolMode:
          type: string
          description: |
            The mode of the transport protocol for communicating with the upstream DNS server:
            - `PreferUDP` — UDP is used, even if the original request came over TCP. Note that if the DNS response from the upstream DNS server exceeds 512 bytes and has been truncated and marked with the TC bit ([RFC 1035](https://datatracker.ietf.org/doc/html/rfc1035.html#section-4.2.1)), then it will be resent over TCP ([RFC 5966](https://datatracker.ietf.org/doc/html/rfc5966)). The request will not be resent over TCP if there are other UDP issues.
            - `ForceTCP` — Always uses TCP, even if the original request is over UDP.
            - `KeepOriginal` — Uses the same protocol (TCP or UDP) as the original request.
          enum: [PreferUDP, ForceTCP, KeepOriginal]
          default: PreferUDP
  enableLogs:
    description: |
      Enable CoreDNS logging.
    type: boolean
    default: false
  clusterDomainAliases:
    description: |
      A list of cluster domain aliases; these are resolved on par with `global.discovery.clusterDomain`.

      **Please note:** the domain alias must not match the domain used in the DNS name template in the [publicDomainTemplate](../../deckhouse-configure-global.html#parameters-modules-publicdomaintemplate) parameter.
    type: array
    items:
      type: string
      pattern: '^[0-9a-zA-Z\.-]+$'
  resourcesRequests:
    required: ["mode"]
    type: object
    description: |
      Max amounts of CPU and memory resources that the pod can request when selecting a node.

      If the `vertical-pod-autoscaler` module is disabled, then these values become the default ones.
    default: {}
    x-examples:
    - mode: VPA
      vpa:
        mode: Auto
        cpu:
          min: "50m"
          max: 2
        memory:
          min: "256Mi"
          max: "2Gi"
    - mode: VPA
      vpa:
        mode: Initial
        cpu:
          min: 1
          max: 3000m
        memory:
          min: 1024
          max: 4096
    - mode: Static
      static:
        cpu: "55m"
        memory: "256Ki"
    oneOf:
      - properties:
          mode:
            enum: ["VPA"]
          vpa: {}
      - properties:
          mode:
            enum: ["Static"]
          static: {}
    properties:
      mode:
        type: string
        description: |
          Resource request management mode:
          - `Static` is a classic one. In it, you explicitly specify requests. The parameters of this mode are defined in the [static](#parameters-resourcesrequests-static) parameter section;
          - `VPA` mode uses [VPA](https://github.com/kubernetes/design-proposals-archive/blob/main/autoscaling/vertical-pod-autoscaler.md). You can configure this mode by modifying parameters in the [vpa](#parameters-resourcesrequests-vpa) parameter section.
        enum: ["VPA", "Static"]
        default: "VPA"
      vpa:
        type: object
        description: |
          Resource request management options for the VPA mode.
        required:
          - mode
          - cpu
          - memory
        default: {}
        properties:
          mode:
            type: string
            description: |
              The VPA usage mode.
            enum: ["Initial", "Auto"]
            default: "Initial"
          cpu:
            type: object
            description: |
              CPU-related parameters.
            default: {}
            properties:
              max:
                oneOf:
                  - type: string
                    pattern: "^[0-9]+m?$"
                  - type: number
                description: |
                  The maximum value that the VPA can set for the CPU requests.
                default: "500m"
              min:
                oneOf:
                  - type: string
                    pattern: "^[0-9]+m?$"
                  - type: number
                description: |
                  The minimum value that the VPA can set for the CPU requests.
                default: "50m"
          memory:
            type: object
            description: |
              The amount of memory requested.
            default: {}
            properties:
              max:
                oneOf:
                  - type: string
                    pattern: '^[0-9]+(\.[0-9]+)?(E|P|T|G|M|k|Ei|Pi|Ti|Gi|Mi|Ki)?$'
                  - type: number
                description: |
                  The maximum memory requests the VPA can set.
                default: "2048Mi"
              min:
                oneOf:
                  - type: string
                    pattern: '^[0-9]+(\.[0-9]+)?(E|P|T|G|M|k|Ei|Pi|Ti|Gi|Mi|Ki)?$'
                  - type: number
                description: |
                  The minimum memory requests the VPA can set.
                default: "64Mi"
      static:
        type: object
        description: |
          Resource request management options for the `Static` mode.
        required:
          - cpu
          - memory
        default: {}
        properties:
          cpu:
            oneOf:
              - type: string
                pattern: "^[0-9]+m?$"
              - type: number
            description: |
              Configuring CPU requests.
            default: "50m"
          memory:
            oneOf:
              - type: string
                pattern: '^[0-9]+(\.[0-9]+)?(E|P|T|G|M|k|Ei|Pi|Ti|Gi|Mi|Ki)?$'
              - type: number
            description: |
              Configuring memory requests.
            default: "64Mi"
