Subject: [PATCH] logs
---
Index: staging/src/k8s.io/kms/internal/plugins/_mock/go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/kms/internal/plugins/_mock/go.sum b/staging/src/k8s.io/kms/internal/plugins/_mock/go.sum
--- a/staging/src/k8s.io/kms/internal/plugins/_mock/go.sum	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/kms/internal/plugins/_mock/go.sum	(date 1724445324192)
@@ -8,6 +8,7 @@
 github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
 github.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=
 github.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
+github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
 github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=
 github.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=
@@ -37,6 +38,7 @@
 golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.17.0 h1:pVaXccu2ozPjCXewfr1S7xza/zcXTity9cCdXQYSjIM=
 golang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=
+golang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
@@ -45,10 +47,12 @@
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.13.0 h1:Af8nKPmuFypiUBjVoU9V20FiaFXOcuZI21p0ycVYYGE=
 golang.org/x/sys v0.13.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.13.0 h1:ablQoSUd0tRdKxZewP80B+BaqeKJuVhuRxj/dkrun3k=
 golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=
+golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
 golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=
@@ -65,5 +69,6 @@
 google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 google.golang.org/protobuf v1.31.0 h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=
 google.golang.org/protobuf v1.31.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=
+google.golang.org/protobuf v1.33.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=
 k8s.io/klog/v2 v2.100.1 h1:7WCHKK6K8fNhTqfBhISHQ97KrnJNFZMcQvKp7gP/tmg=
 k8s.io/utils v0.0.0-20230726121419-3b25d923346b h1:sgn3ZU783SCgtaSJjpcVVlRqd6GSnlTLKgpAAttJvpI=
Index: staging/src/k8s.io/kms/internal/plugins/_mock/go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/kms/internal/plugins/_mock/go.mod b/staging/src/k8s.io/kms/internal/plugins/_mock/go.mod
--- a/staging/src/k8s.io/kms/internal/plugins/_mock/go.mod	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/kms/internal/plugins/_mock/go.mod	(date 1724445324192)
@@ -9,16 +9,16 @@

 require (
 	github.com/gogo/protobuf v1.3.2 // indirect
-	github.com/golang/protobuf v1.5.3 // indirect
+	github.com/golang/protobuf v1.5.4 // indirect
 	github.com/miekg/pkcs11 v1.0.3-0.20190429190417-a667d056470f // indirect
 	github.com/pkg/errors v0.9.1 // indirect
 	github.com/thales-e-security/pool v0.0.2 // indirect
-	golang.org/x/net v0.17.0 // indirect
-	golang.org/x/sys v0.13.0 // indirect
-	golang.org/x/text v0.13.0 // indirect
+	golang.org/x/net v0.23.0 // indirect
+	golang.org/x/sys v0.18.0 // indirect
+	golang.org/x/text v0.14.0 // indirect
 	google.golang.org/genproto/googleapis/rpc v0.0.0-20230525234030-28d5490b6b19 // indirect
 	google.golang.org/grpc v1.56.3 // indirect
-	google.golang.org/protobuf v1.31.0 // indirect
+	google.golang.org/protobuf v1.33.0 // indirect
 )

 replace (
Index: staging/src/k8s.io/apiserver/pkg/endpoints/installer.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/installer.go b/staging/src/k8s.io/apiserver/pkg/endpoints/installer.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/installer.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/installer.go	(date 1724446093305)
@@ -18,6 +18,7 @@

 import (
 	"fmt"
+	"k8s.io/klog/v2"
 	"net/http"
 	"reflect"
 	"sort"
@@ -1262,60 +1263,131 @@

 func restfulListResource(r rest.Lister, rw rest.Watcher, scope handlers.RequestScope, forceWatch bool, minRequestTimeout time.Duration) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call list resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.ListResource(r, rw, &scope, forceWatch, minRequestTimeout)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulCreateNamedResource(r rest.NamedCreater, scope handlers.RequestScope, admit admission.Interface) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call create named resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.CreateNamedResource(r, &scope, admit)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulCreateResource(r rest.Creater, scope handlers.RequestScope, admit admission.Interface) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call create resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
+
 		handlers.CreateResource(r, &scope, admit)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulDeleteResource(r rest.GracefulDeleter, allowsOptions bool, scope handlers.RequestScope, admit admission.Interface) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call delete resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.DeleteResource(r, allowsOptions, &scope, admit)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulDeleteCollection(r rest.CollectionDeleter, checkBody bool, scope handlers.RequestScope, admit admission.Interface) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call delete collection resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.DeleteCollection(r, checkBody, &scope, admit)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulUpdateResource(r rest.Updater, scope handlers.RequestScope, admit admission.Interface) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call update resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.UpdateResource(r, &scope, admit)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulPatchResource(r rest.Patcher, scope handlers.RequestScope, admit admission.Interface, supportedTypes []string) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call patch resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.PatchResource(r, &scope, admit, supportedTypes)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulGetResource(r rest.Getter, scope handlers.RequestScope) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call get resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.GetResource(r, &scope)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulGetResourceWithOptions(r rest.GetterWithOptions, scope handlers.RequestScope, isSubresource bool) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call get resource with option resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.GetResourceWithOptions(r, &scope, isSubresource)(res.ResponseWriter, req.Request)
 	}
 }

 func restfulConnectResource(connecter rest.Connecter, scope handlers.RequestScope, admit admission.Interface, restPath string, isSubresource bool) restful.RouteFunction {
 	return func(req *restful.Request, res *restful.Response) {
+		klog.V(2).Infof(
+			"Call connect resource: useragent %s/%s/%s; url %s;\n",
+			req.Request.Header.Get("User-Agent"),
+			req.Request.Header.Get("X-User-Agent"),
+			req.Request.Header.Get("X-Device-User-Agent"),
+			req.Request.URL.String(),
+		)
 		handlers.ConnectResource(connecter, &scope, admit, restPath, isSubresource)(res.ResponseWriter, req.Request)
 	}
 }
Index: staging/src/k8s.io/apimachinery/pkg/util/managedfields/internal/structuredmerge.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apimachinery/pkg/util/managedfields/internal/structuredmerge.go b/staging/src/k8s.io/apimachinery/pkg/util/managedfields/internal/structuredmerge.go
--- a/staging/src/k8s.io/apimachinery/pkg/util/managedfields/internal/structuredmerge.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apimachinery/pkg/util/managedfields/internal/structuredmerge.go	(date 1725219880277)
@@ -18,6 +18,7 @@

 import (
 	"fmt"
+	"k8s.io/klog/v2"

 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/api/meta"
@@ -87,6 +88,7 @@

 // Update implements Manager.
 func (f *structuredMergeManager) Update(liveObj, newObj runtime.Object, managed Managed, manager string) (runtime.Object, Managed, error) {
+	klog.V(1).Infof("structuredMergeManager.Update potential conversion %s", manager)
 	newObjVersioned, err := f.toVersioned(newObj)
 	if err != nil {
 		return nil, nil, fmt.Errorf("failed to convert new object (%v) to proper version (%v): %v", objectGVKNN(newObj), f.groupVersion, err)
@@ -134,6 +136,7 @@
 		return nil, nil, errors.NewBadRequest("metadata.managedFields must be nil")
 	}

+	klog.V(1).Infof("structuredMergeManager.Apply potential conversion %s", manager)
 	liveObjVersioned, err := f.toVersioned(liveObj)
 	if err != nil {
 		return nil, nil, fmt.Errorf("failed to convert live object (%v) to proper version: %v", objectGVKNN(liveObj), err)
Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/patch.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/patch.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/patch.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/patch.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/patch.go	(date 1724793860954)
@@ -19,7 +19,9 @@
 import (
 	"context"
 	"fmt"
+	"k8s.io/klog/v2"
 	"net/http"
+	"reflect"
 	"strings"
 	"time"

@@ -63,6 +65,15 @@
 // PatchResource returns a function that will handle a resource patch.
 func PatchResource(r rest.Patcher, scope *RequestScope, admit admission.Interface, patchTypes []string) http.HandlerFunc {
 	return func(w http.ResponseWriter, req *http.Request) {
+		klog.V(1).Infof(
+			"Call PatchResource: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+			req.Header.Get("User-Agent"),
+			req.Header.Get("X-User-Agent"),
+			req.Header.Get("X-Device-User-Agent"),
+			req.URL.String(),
+			scope.Resource.String(),
+			scope.Subresource,
+		)
 		ctx := req.Context()
 		// For performance tracking purposes.
 		ctx, span := tracing.Start(ctx, "Patch", traceFields(req)...)
@@ -139,6 +150,14 @@
 		}
 		gv := scope.Kind.GroupVersion()

+		klog.V(1).Infof(
+			"Call patchResource: gv %s/%s/%s; url %s;\n",
+			gv.Group,
+			gv.Version,
+			scope.Kind,
+			req.Header.Get("User-Agent"),
+		)
+
 		validationDirective := fieldValidation(options.FieldValidation)
 		decodeSerializer := s.Serializer
 		if validationDirective == metav1.FieldValidationWarn || validationDirective == metav1.FieldValidationStrict {
@@ -224,7 +243,7 @@
 			userAgent:   req.UserAgent(),
 		}

-		result, wasCreated, err := p.patchResource(ctx, scope)
+		result, wasCreated, err := p.patchResource(ctx, scope, req)
 		if err != nil {
 			scope.err(err, w, req)
 			return
@@ -614,7 +633,7 @@
 }

 // patchResource divides PatchResource for easier unit testing
-func (p *patcher) patchResource(ctx context.Context, scope *RequestScope) (runtime.Object, bool, error) {
+func (p *patcher) patchResource(ctx context.Context, scope *RequestScope, req *http.Request) (runtime.Object, bool, error) {
 	p.namespace = request.NamespaceValue(ctx)
 	switch p.patchType {
 	case types.JSONPatchType, types.MergePatchType:
@@ -623,6 +642,14 @@
 			fieldManager: scope.FieldManager,
 		}
 	case types.StrategicMergePatchType:
+		klog.V(1).Infof(
+			"Call patchResource: apply strategic merge patch for resource %s; url %s; agent %s; gv %s; obj %s\n",
+			scope.Resource.String(),
+			req.URL.String(),
+			req.Header.Get("User-Agent"),
+			p.hubGroupVersion.String(),
+			p.restPatcher.New().GetObjectKind().GroupVersionKind().String(),
+		)
 		schemaReferenceObj, err := p.unsafeConvertor.ConvertToVersion(p.restPatcher.New(), p.kind.GroupVersion())
 		if err != nil {
 			return nil, false, err
@@ -653,7 +680,34 @@
 		return obj, nil
 	}

-	transformers := []rest.TransformFunc{p.applyPatch, p.applyAdmission, dedupOwnerReferencesTransformer}
+	transformers := []rest.TransformFunc{func(ctx context.Context, newObj runtime.Object, oldObj runtime.Object) (transformedNewObj runtime.Object, err error) {
+		oldObjStr := "nil"
+		if oldObj != nil && !reflect.ValueOf(oldObj).IsNil() {
+			a := oldObj.GetObjectKind()
+			if a != nil && !reflect.ValueOf(a).IsNil() {
+				b := a.GroupVersionKind()
+				oldObjStr = b.String()
+			}
+		}
+
+		newObjStr := "nil"
+		if newObj != nil && !reflect.ValueOf(newObj).IsNil() {
+			a := newObj.GetObjectKind()
+			if a != nil && !reflect.ValueOf(a).IsNil() {
+				b := a.GroupVersionKind()
+				newObjStr = b.String()
+			}
+		}
+
+		klog.V(1).Infof(
+			"Call patchResource: apply patch transform old %s new %s; url %s; agent %s\n",
+			oldObjStr,
+			newObjStr,
+			req.URL.String(),
+			req.Header.Get("User-Agent"),
+		)
+		return p.applyPatch(ctx, newObj, oldObj)
+	}, p.applyAdmission, dedupOwnerReferencesTransformer}

 	wasCreated := false
 	p.updatedObjectInfo = rest.DefaultUpdatedObjectInfo(nil, transformers...)
Index: staging/src/k8s.io/client-go/rest/request.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/client-go/rest/request.go b/staging/src/k8s.io/client-go/rest/request.go
--- a/staging/src/k8s.io/client-go/rest/request.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/client-go/rest/request.go	(date 1724783065455)
@@ -373,6 +373,14 @@
 	if r.err != nil {
 		return r
 	}
+	klog.V(1).Infof(
+		"Encode parametrs for request %s; useragent %s; obj %s/%s/%s",
+		r.URL().String(),
+		r.headers.Get("User-Agent"),
+		obj.GetObjectKind().GroupVersionKind().Kind,
+		obj.GetObjectKind().GroupVersionKind().Group,
+		obj.GetObjectKind().GroupVersionKind().Version,
+	)
 	params, err := codec.EncodeParameters(obj, version)
 	if err != nil {
 		r.err = err
@@ -1111,6 +1119,7 @@
 		if err != nil {
 			return Result{err: errors.NewInternalError(err)}
 		}
+		klog.V(1).Infof("Negotiator.Decode: %s; user agent %s", req.URL.String(), req.Header.Get("User-Agent"))
 		decoder, err = r.c.content.Negotiator.Decoder(mediaType, params)
 		if err != nil {
 			// if we fail to negotiate a decoder, treat this as an unstructured error
Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/watch.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/watch.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/watch.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/watch.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/watch.go	(date 1724783757784)
@@ -20,6 +20,7 @@
 	"bytes"
 	"fmt"
 	"io"
+	"k8s.io/klog/v2"
 	"net/http"
 	"reflect"
 	"time"
@@ -172,6 +173,16 @@
 func (s *WatchServer) ServeHTTP(w http.ResponseWriter, req *http.Request) {
 	kind := s.Scope.Kind

+	klog.V(1).Infof(
+		"Call WatchServer serve: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+		req.Header.Get("User-Agent"),
+		req.Header.Get("X-User-Agent"),
+		req.Header.Get("X-Device-User-Agent"),
+		req.URL.String(),
+		s.Scope.Resource.String(),
+		s.Scope.Subresource,
+	)
+
 	if wsstream.IsWebSocketRequest(req) {
 		w.Header().Set("Content-Type", s.MediaType)
 		websocket.Handler(s.HandleWS).ServeHTTP(w, req)
@@ -232,6 +243,15 @@
 			defer runtime.AllocatorPool.Put(memoryAllocator)
 		}
 		embeddedEncodeFn = func(obj runtime.Object, w io.Writer) error {
+			klog.V(1).Infof(
+				"Call WatchServer encode with allocator: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+				req.Header.Get("User-Agent"),
+				req.Header.Get("X-User-Agent"),
+				req.Header.Get("X-Device-User-Agent"),
+				req.URL.String(),
+				s.Scope.Resource.String(),
+				s.Scope.Subresource,
+			)
 			return encoder.EncodeWithAllocator(obj, w, memoryAllocator)
 		}
 	}
Index: staging/src/k8s.io/apimachinery/pkg/runtime/serializer/versioning/versioning.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apimachinery/pkg/runtime/serializer/versioning/versioning.go b/staging/src/k8s.io/apimachinery/pkg/runtime/serializer/versioning/versioning.go
--- a/staging/src/k8s.io/apimachinery/pkg/runtime/serializer/versioning/versioning.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apimachinery/pkg/runtime/serializer/versioning/versioning.go	(date 1725220118792)
@@ -187,6 +187,10 @@
 		c.defaulter.Default(obj)
 	}

+	klog.V(2).Infof("codec.Decode decodet version identifier %s; gvk %s",
+		c.decodeVersion.Identifier(),
+		obj.GetObjectKind().GroupVersionKind().String(),
+	)
 	out, err := c.convertor.ConvertToVersion(obj, c.decodeVersion)
 	if err != nil {
 		return nil, gvk, err
@@ -269,6 +273,7 @@
 	}

 	// Perform a conversion if necessary
+
 	out, err := c.convertor.ConvertToVersion(obj, c.encodeVersion)
 	if err != nil {
 		return err
Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/update.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/update.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/update.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/update.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/update.go	(date 1724783065447)
@@ -49,6 +49,15 @@
 // UpdateResource returns a function that will handle a resource update
 func UpdateResource(r rest.Updater, scope *RequestScope, admit admission.Interface) http.HandlerFunc {
 	return func(w http.ResponseWriter, req *http.Request) {
+		klog.V(1).Infof(
+			"Call UpdateResource: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+			req.Header.Get("User-Agent"),
+			req.Header.Get("X-User-Agent"),
+			req.Header.Get("X-Device-User-Agent"),
+			req.URL.String(),
+			scope.Resource.String(),
+			scope.Subresource,
+		)
 		ctx := req.Context()
 		// For performance tracking purposes.
 		ctx, span := tracing.Start(ctx, "Update", traceFields(req)...)
@@ -109,6 +118,15 @@
 		}

 		decoder := scope.Serializer.DecoderToVersion(decodeSerializer, scope.HubGroupVersion)
+		klog.V(1).Infof(
+			"Call UpdateResource decode to version from: useragent %s/%s/%s; url %s; default gvk: %s; original: %s \n",
+			req.Header.Get("User-Agent"),
+			req.Header.Get("X-User-Agent"),
+			req.Header.Get("X-Device-User-Agent"),
+			req.URL.String(),
+			defaultGVK.String(),
+			original.GetObjectKind().GroupVersionKind().String(),
+		)
 		span.AddEvent("About to convert to expected version")
 		obj, gvk, err := decoder.Decode(body, &defaultGVK, original)
 		if err != nil {
Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/response.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/response.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/response.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/response.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/response.go	(date 1724783302470)
@@ -19,6 +19,7 @@
 import (
 	"context"
 	"fmt"
+	"k8s.io/klog/v2"
 	"net/http"

 	"k8s.io/apimachinery/pkg/api/errors"
@@ -189,6 +190,7 @@
 		item := &table.Rows[i]
 		switch opts.IncludeObject {
 		case metav1.IncludeObject:
+			klog.V(1).Infof("as table %s/%s/%s", scope.Kind, scope.Resource.String(), scope.Subresource)
 			item.Object.Object, err = scope.Convertor.ConvertToVersion(item.Object.Object, scope.Kind.GroupVersion())
 			if err != nil {
 				return nil, err
Index: staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go b/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go
--- a/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/customresource_handler.go	(date 1724782069059)
@@ -363,6 +363,18 @@
 	requestScope := crdInfo.requestScopes[requestInfo.APIVersion]
 	storage := crdInfo.storages[requestInfo.APIVersion].CustomResource

+	klog.V(2).Infof(
+		"serve resource: useragent %s/%s/%s; verb %s; url %s; api %s/%s/%s \n",
+		req.Header.Get("User-Agent"),
+		req.Header.Get("X-User-Agent"),
+		req.Header.Get("X-Device-User-Agent"),
+		requestInfo.Verb,
+		req.URL.String(),
+		requestInfo.APIVersion,
+		requestInfo.Resource,
+		requestInfo.APIGroup,
+	)
+
 	switch requestInfo.Verb {
 	case "get":
 		return handlers.GetResource(storage, requestScope)
@@ -410,6 +422,18 @@
 	requestScope := crdInfo.statusRequestScopes[requestInfo.APIVersion]
 	storage := crdInfo.storages[requestInfo.APIVersion].Status

+	klog.V(2).Infof(
+		"serve status: useragent %s/%s/%s; verb %s; url %s; api %s/%s/%s \n",
+		req.Header.Get("User-Agent"),
+		req.Header.Get("X-User-Agent"),
+		req.Header.Get("X-Device-User-Agent"),
+		requestInfo.Verb,
+		req.URL.String(),
+		requestInfo.APIVersion,
+		requestInfo.Resource,
+		requestInfo.APIGroup,
+	)
+
 	switch requestInfo.Verb {
 	case "get":
 		return handlers.GetResource(storage, requestScope)
@@ -430,6 +454,18 @@
 	requestScope := crdInfo.scaleRequestScopes[requestInfo.APIVersion]
 	storage := crdInfo.storages[requestInfo.APIVersion].Scale

+	klog.V(2).Infof(
+		"serve scale: useragent %s/%s/%s; verb %s; url %s; api %s/%s/%s \n",
+		req.Header.Get("User-Agent"),
+		req.Header.Get("X-User-Agent"),
+		req.Header.Get("X-Device-User-Agent"),
+		requestInfo.Verb,
+		req.URL.String(),
+		requestInfo.APIVersion,
+		requestInfo.Resource,
+		requestInfo.APIGroup,
+	)
+
 	switch requestInfo.Verb {
 	case "get":
 		return handlers.GetResource(storage, requestScope)
@@ -689,6 +725,7 @@
 		}
 	}

+	klog.V(1).Infof("New converter for crd %s", crd.Name)
 	safeConverter, unsafeConverter, err := r.converterFactory.NewConverter(crd)
 	if err != nil {
 		return nil, err
Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/delete.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/delete.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/delete.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/delete.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/delete.go	(date 1724698236618)
@@ -19,6 +19,7 @@
 import (
 	"context"
 	"fmt"
+	"k8s.io/klog/v2"
 	"net/http"
 	"time"

@@ -49,6 +50,15 @@
 // TODO admission here becomes solely validating admission
 func DeleteResource(r rest.GracefulDeleter, allowsOptions bool, scope *RequestScope, admit admission.Interface) http.HandlerFunc {
 	return func(w http.ResponseWriter, req *http.Request) {
+		klog.V(1).Infof(
+			"Call DeleteResource: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+			req.Header.Get("User-Agent"),
+			req.Header.Get("X-User-Agent"),
+			req.Header.Get("X-Device-User-Agent"),
+			req.URL.String(),
+			scope.Resource.String(),
+			scope.Subresource,
+		)
 		ctx := req.Context()
 		// For performance tracking purposes.
 		ctx, span := tracing.Start(ctx, "Delete", traceFields(req)...)
Index: staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/mutating/dispatcher.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/mutating/dispatcher.go b/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/mutating/dispatcher.go
--- a/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/mutating/dispatcher.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/mutating/dispatcher.go	(date 1725219640540)
@@ -233,6 +233,7 @@

 	// convert versionedAttr.VersionedObject to the internal version in the underlying admission.Attributes
 	if v.versionedAttr != nil && v.versionedAttr.VersionedObject != nil && v.versionedAttr.Dirty {
+		klog.V(1).Infof("Potential conver from mutating dispatcher Dispatch")
 		return o.GetObjectConvertor().Convert(v.versionedAttr.VersionedObject, v.versionedAttr.Attributes.GetObject(), nil)
 	}

Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/create.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/create.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/create.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/create.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/create.go	(date 1724698236606)
@@ -52,6 +52,15 @@

 func createHandler(r rest.NamedCreater, scope *RequestScope, admit admission.Interface, includeName bool) http.HandlerFunc {
 	return func(w http.ResponseWriter, req *http.Request) {
+		klog.V(1).Infof(
+			"Call CreateeResource: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+			req.Header.Get("User-Agent"),
+			req.Header.Get("X-User-Agent"),
+			req.Header.Get("X-Device-User-Agent"),
+			req.URL.String(),
+			scope.Resource.String(),
+			scope.Subresource,
+		)
 		ctx := req.Context()
 		// For performance tracking purposes.
 		ctx, span := tracing.Start(ctx, "Create", traceFields(req)...)
@@ -124,6 +133,13 @@
 		decoder := scope.Serializer.DecoderToVersion(decodeSerializer, scope.HubGroupVersion)
 		span.AddEvent("About to convert to expected version")
 		obj, gvk, err := decoder.Decode(body, &defaultGVK, original)
+		klog.V(2).Infof(
+			"Call createHandler resource: gvk %s/%s/%s; agent %s;\n",
+			gvk.Kind,
+			gvk.Group,
+			gvk.Version,
+			req.Header.Get("User-Agent"),
+		)
 		if err != nil {
 			strictError, isStrictError := runtime.AsStrictDecodingError(err)
 			switch {
Index: staging/src/k8s.io/apimachinery/pkg/runtime/codec.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apimachinery/pkg/runtime/codec.go b/staging/src/k8s.io/apimachinery/pkg/runtime/codec.go
--- a/staging/src/k8s.io/apimachinery/pkg/runtime/codec.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apimachinery/pkg/runtime/codec.go	(date 1725219522445)
@@ -160,6 +160,7 @@
 	}
 	for i := range targetGVKs {
 		if targetGVKs[i].GroupVersion() == from {
+			klog.V(1).Infof("DecodeParameters: parameterCodec parameters %s; from gvk %s; targets %v", parameters.Encode(), from.String(), targetGVKs)
 			if err := c.convertor.Convert(&parameters, into, nil); err != nil {
 				return err
 			}
@@ -175,6 +176,8 @@
 	if err != nil {
 		return err
 	}
+	klog.V(1).Infof("DecodeParameters: parameterCodec  encode first parameters %s; from gvk %s; targets %v", parameters.Encode(), from.String(), targetGVKs)
+
 	if err := c.convertor.Convert(&parameters, input, nil); err != nil {
 		return err
 	}
@@ -194,6 +197,16 @@
 	}
 	gvk := gvks[0]
 	if to != gvk.GroupVersion() {
+		gvkStr := "unknown"
+		if obj != nil {
+			k := obj.GetObjectKind()
+			if k != nil {
+				gk := k.GroupVersionKind()
+				gvkStr = gk.String()
+			}
+		}
+		klog.V(1).Infof("EncodeParameters: parameterCodec parameters from gvk %s; to %v; first apply gvk: %s", gvkStr, to.String(), gvk.String())
+
 		out, err := c.convertor.ConvertToVersion(obj, to)
 		if err != nil {
 			return nil, err
Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest_test.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest_test.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest_test.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest_test.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest_test.go	(date 1724784799051)
@@ -552,7 +552,7 @@
 		ctx, cancel := context.WithTimeout(ctx, time.Second)
 		resultObj, _, err := p.patchResource(ctx, &RequestScope{
 			FieldManager: fieldmanager,
-		})
+		}, nil)
 		cancel()

 		if len(tc.expectedError) != 0 {
Index: staging/src/k8s.io/apiserver/pkg/admission/plugin/validatingadmissionpolicy/controller.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/admission/plugin/validatingadmissionpolicy/controller.go b/staging/src/k8s.io/apiserver/pkg/admission/plugin/validatingadmissionpolicy/controller.go
--- a/staging/src/k8s.io/apiserver/pkg/admission/plugin/validatingadmissionpolicy/controller.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/admission/plugin/validatingadmissionpolicy/controller.go	(date 1725219523177)
@@ -326,6 +326,7 @@
 			}

 			if versionedAttr == nil {
+				klog.V(1).Infof("Potential conversion from celAdmissionController validate")
 				va, err := admission.NewVersionedAttributes(a, matchKind, o)
 				if err != nil {
 					wrappedErr := fmt.Errorf("failed to convert object version: %w", err)
Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/rest.go	(date 1724698413777)
@@ -22,6 +22,7 @@
 	"fmt"
 	"io"
 	"io/ioutil"
+	"k8s.io/klog/v2"
 	"net/http"
 	"net/url"
 	"strings"
@@ -182,6 +183,16 @@
 			return
 		}

+		klog.V(1).Infof(
+			"Call ConnectRsource: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+			req.Header.Get("User-Agent"),
+			req.Header.Get("X-User-Agent"),
+			req.Header.Get("X-Device-User-Agent"),
+			req.URL.String(),
+			scope.Resource.String(),
+			scope.Subresource,
+		)
+
 		namespace, name, err := scope.Namer.Name(req)
 		if err != nil {
 			scope.err(err, w, req)
Index: staging/src/k8s.io/apiserver/pkg/endpoints/handlers/get.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/get.go b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/get.go
--- a/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/get.go	(revision cbb86e0d7f4a049666fac0551e8b02ef3d6c3d9a)
+++ b/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/get.go	(date 1724698597289)
@@ -54,6 +54,16 @@
 // passed-in getterFunc to perform the actual get.
 func getResourceHandler(scope *RequestScope, getter getterFunc) http.HandlerFunc {
 	return func(w http.ResponseWriter, req *http.Request) {
+		klog.V(1).Infof(
+			"Call GetResource: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+			req.Header.Get("User-Agent"),
+			req.Header.Get("X-User-Agent"),
+			req.Header.Get("X-Device-User-Agent"),
+			req.URL.String(),
+			scope.Resource.String(),
+			scope.Subresource,
+		)
+
 		ctx := req.Context()
 		ctx, span := tracing.Start(ctx, "Get", traceFields(req)...)
 		defer span.End(500 * time.Millisecond)
@@ -167,6 +177,15 @@

 func ListResource(r rest.Lister, rw rest.Watcher, scope *RequestScope, forceWatch bool, minRequestTimeout time.Duration) http.HandlerFunc {
 	return func(w http.ResponseWriter, req *http.Request) {
+		klog.V(1).Infof(
+			"Call ListResource: useragent %s/%s/%s; url %s; scope: %s; subres: %s\n",
+			req.Header.Get("User-Agent"),
+			req.Header.Get("X-User-Agent"),
+			req.Header.Get("X-Device-User-Agent"),
+			req.URL.String(),
+			scope.Resource.String(),
+			scope.Subresource,
+		)
 		ctx := req.Context()
 		// For performance tracking purposes.
 		ctx, span := tracing.Start(ctx, "List", traceFields(req)...)
